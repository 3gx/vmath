#ifndef real
#error "real must be defined"
#endif
struct TEMPLATE(Force,real)
{
  real<3> acc, jrk;
  real    pot, null;
};

struct TEMPLATE(Predictor,real)
{
  real<3> pos, vel;
};

inline void TEMPLATE(body_body_force,real)(
    TEMPLATE(Force,real) &fi,
    const TEMPLATE(Predictor,real) &pi,
    const TEMPLATE(Predictor,real) &pj,
    const real mj)
{
  const real dx = pj.pos.x - pi.pos.x;
  const real dy = pj.pos.y - pi.pos.y;
  const real dz = pj.pos.z - pi.pos.z;

  const real ds2 = dx*dx + dy*dy + dz*dz;

  const real  inv_ds  = ds2 > 0.0 ? rsqrt((float)ds2) : 0.0;
  const real  inv_ds2 = inv_ds*inv_ds;
  const real minv_ds  = inv_ds  * mj;
  const real minv_ds3 = inv_ds2 * minv_ds;


  fi.acc.x += minv_ds3 * dx;
  fi.acc.y += minv_ds3 * dy;
  fi.acc.z += minv_ds3 * dz;
  fi.pot   -= minv_ds;
  
  const real dvx = pj.vel.x - pi.vel.x;
  const real dvy = pj.vel.y - pi.vel.y;
  const real dvz = pj.vel.z - pi.vel.z;
  const real rv  = dx*dvx + dy*dvy + dz*dvz;
  
  const real Jij = (-3.0) * (rv * inv_ds2 * minv_ds3);
  
  fi.jrk.x += minv_ds3*dvx + Jij*dx;
  fi.jrk.y += minv_ds3*dvy + Jij*dy;
  fi.jrk.z += minv_ds3*dvz + Jij*dz;
}

export void TEMPLATE(compute_forces,real)(
    uniform const int     n,
    uniform const int     n1,
    uniform const int     n2,
    uniform const real mass[],
    uniform const real posx[],
    uniform const real posy[],
    uniform const real posz[],
    uniform const real velx[],
    uniform const real vely[],
    uniform const real velz[],
    uniform       real accx[],
    uniform       real accy[],
    uniform       real accz[],
    uniform       real jrkx[],
    uniform       real jrky[],
    uniform       real jrkz[],
    uniform       real gpot[])
{
#define Predictor TEMPLATE(Predictor,real)
  uniform real shdata[7][programCount];

  foreach (i = n1 ... n2)
  {
    TEMPLATE(Force, real) fi;
    fi.acc = 0.0;
    fi.jrk = 0.0;
    fi.pot = 0.0;
   
    Predictor pi;
    pi.pos.x = posx[i];
    pi.pos.y = posy[i];
    pi.pos.z = posz[i];
    pi.vel.x = velx[i];
    pi.vel.y = vely[i];
    pi.vel.z = velz[i];

#if 1
    for (uniform int jb = 0; jb < n; jb += programCount)
    {
      const int jp = jb + programIndex;
      /* precache data */
      shdata[3][programIndex] = 0.0;
      if (jp < n)
      {
        shdata[0][programIndex] = posx[jp];
        shdata[1][programIndex] = posy[jp];
        shdata[2][programIndex] = posz[jp];
        shdata[3][programIndex] = mass[jp];
        shdata[4][programIndex] = velx[jp];
        shdata[5][programIndex] = vely[jp];
        shdata[6][programIndex] = velz[jp];
      }
#if 0 /* doesn't compile in icpc */
      prefetch_l1(&posx[jb + programCount]);
      prefetch_l1(&posy[jb + programCount]);
      prefetch_l1(&posz[jb + programCount]);
      prefetch_l1(&velx[jb + programCount]);
      prefetch_l1(&vely[jb + programCount]);
      prefetch_l1(&velz[jb + programCount]);
      prefetch_l1(&mass[jb + programCount]);
#endif

      for (uniform int j = 0; j < programCount; j++)
      {
        Predictor pj;
        pj.pos.x = shdata[0][j];
        pj.pos.y = shdata[1][j];
        pj.pos.z = shdata[2][j];
        pj.vel.x = shdata[4][j];
        pj.vel.y = shdata[5][j];
        pj.vel.z = shdata[6][j];
        const real jmass  = shdata[3][j];
        TEMPLATE(body_body_force,real)(fi,pi,pj,jmass);
      }
    }
#else
    for (uniform int j = 0; j < n; j++)
    {
      Predictor pj;
      pj.pos.x = posx[j];
      pj.pos.y = posy[j];
      pj.pos.z = posz[j];
      pj.vel.x = velx[j];
      pj.vel.y = vely[j];
      pj.vel.z = velz[j];
      const real jmass = mass[j];
      TEMPLATE(body_body_force,real)(fi,pi,pj,jmass);
    }
#endif

#undef NBLOCK
    accx[i] = fi.acc.x;
    accy[i] = fi.acc.y;
    accz[i] = fi.acc.z;
    jrkx[i] = fi.jrk.x;
    jrky[i] = fi.jrk.y;
    jrkz[i] = fi.jrk.z;
    gpot[i] = fi.pot;
  }
#undef Predictor
}

#undef real
